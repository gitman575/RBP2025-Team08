 import cv2
import numpy as np

def color_detector(filename):
    img = cv2.imread(filename)

    # (1) 검정색 근처 픽셀만 선택 (완전한 #000000이 아닐 수도 있으므로 범위 사용)
    black_mask = cv2.inRange(img, (0, 0, 0), (10, 10, 10))

    # (2) 외곽선 찾기
    contours, _ = cv2.findContours(black_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # (3) 검정 테두리 후보가 없으면: 전체 이미지에서 윤곽선 재검색
    if not contours:
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        _, binary = cv2.threshold(gray, 1, 255, cv2.THRESH_BINARY)
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # (4) 그래도 없으면 fallback: 그냥 전체 이미지 마스크 처리
    if not contours:
        mask = np.ones(img.shape[:2], dtype=np.uint8) * 255
    else:
        largest = max(contours, key=cv2.contourArea)
        mask = np.zeros(img.shape[:2], dtype=np.uint8)
        cv2.drawContours(mask, [largest], -1, 255, -1)

    # (5) HSV로 변환 후 마스크 영역 분석
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)

    h_m = h[mask == 255]
    s_m = s[mask == 255]
    v_m = v[mask == 255]

    # (6) R/G/B 조건에 따른 픽셀 수 계산
    count_r = np.sum(((h_m < 20) | (h_m > 160)) & (s_m > 50) & (v_m > 50))
    count_g = np.sum((h_m > 40) & (h_m < 80) & (s_m > 50) & (v_m > 50))
    count_b = np.sum((h_m > 100) & (h_m < 140) & (s_m > 50) & (v_m > 50))

    # (7) 최빈값 색상 반환
    if max(count_r, count_g, count_b) == count_r:
        return 'R'
    elif max(count_r, count_g, count_b) == count_g:
        return 'G'
    else:
        return 'B'
